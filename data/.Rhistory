sfoo <- find.mle(s.lik.con,x.init=runif(min = 0, max = 3, 3))
c(foo$par, foo$lnLik, sfoo$par, sfoo$lnLik)
result <- matrix(,100,8)
for(i in 1:100){
print(i)
foo <- find.mle(lik.con,x.init=runif(min = 0, max = 3, 3))
sfoo <- find.mle(s.lik.con,x.init=runif(min = 0, max = 3, 3))
result[i, 1:8] <- c(foo$par, foo$lnLik, sfoo$par, sfoo$lnLik)
}
colnames(result) <- c("asc","desc","poly","llik","sasc","sdesc","spoly","sllik")
plot(synth[,4])
plot(result[,4])
plot(result[,8])
max(result[,8])
max(result[,4])
result[,8] < -118
result[,8] < -119
result[,8] > -119
result[result[,8] > -119, 1]
results[1:10,]
result[1:10,]
result[1:10,]
library(devtools)
install_github('coleoguy/chromevolR')
library(chromevolR)
library(geiger)
library(diversitree)
# Make a birth-death tree
set.seed(2)
tree <- trees(pars = c(.5, .1),
type = "bd", n = 1,
max.taxa = 100,
include.extinct = FALSE)[[1]]
# Simplify tree
# tree <- tree[c(1, 3, 5, 2)]
# class(tree) <- "phylo"
# Lets rescale this tree to unit length
tree <- geiger::rescale(tree, model = "depth", 1)
plot(tree)
# Evolve chromosome dataset using our simChrom function
set.seed(2)
data <- simChrom(tree, pars=c(2, 1, 0, 10), limits=2:100)
hist(data, breaks=range(data)[2]-range(data)[1])
d.data <- cbind(names(data), data)
d.data <- datatoMatrix(x=d.data, excess=.25, hidden=F)
d.data <- d.data[, 5:18]
lik <- make.mkn(tree, states=d.data,k=14,strict=F)
# Constrain to chromevol
lik.con <- constrainMkn(d.data, lik)
foo <- find.mle(lik.con,x.init=runif(min = 0, max = 3, 3))
foo$par
tree <- tree[c(1, 3, 5, 2)]
class(tree) <- "phylo"
set.seed(2)
tree <- trees(pars = c(.5, .1),
type = "bd", n = 1,
max.taxa = 100,
include.extinct = FALSE)[[1]]
# Simplify tree
tree <- tree[c(1, 3, 5, 2)]
class(tree) <- "phylo"
# Lets rescale this tree to unit length
tree <- geiger::rescale(tree, model = "depth", 1)
plot(tree)
# Evolve chromosome dataset using our simChrom function
set.seed(2)
data <- simChrom(tree, pars=c(2, 1, 0, 10), limits=2:100)
hist(data, breaks=range(data)[2]-range(data)[1])
setwd("~/Desktop/Dropbox/gitrepos/r-packages/chromevolR/data")
write.tree(tree,file="tree.new")
write.csv(data,file="chrom.csv")
chrom <-data
chrom
tree
save(chrom)
save(chrom, file="chrom")
save(tree, file="tree.Rdata")
library(devtools)
install_github('coleoguy/chromevolR')
library(chromevolR)
library(geiger)
library(diversitree)
data("chrom")
library(chromevolR)
data("chrom")
data(chrom)
help("data")
data("chrom", package="chromevolR")
data("chrom.Rdata", package="chromevolR")
load("chrom")
load("tree")
data("tree")
install_github('coleoguy/chromevolR')
data(chrom)
data("chrom")
data("chrom.Rdata")
install_github('coleoguy/chromevolR')
data("tree")
library(chromevolR)
library(geiger)
library(diversitree)
data("chrom")
d.data <- cbind(names(data), data)
d.data <- datatoMatrix(x=d.data, excess=.25, hidden=F)
install_github('coleoguy/chromevolR')
library(chromevolR)
d.data <- cbind(names(data), data)
d.data <- datatoMatrix(x=d.data, excess=.25, hidden=F)
hist(data())
hist(chrom)
d.data <- cbind(names(data), data)
d.data <- datatoMatrix(x=d.data, range=c(8,17), hidden=F)
d.data <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
d.data <- cbind(names(data), data)
d.data <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
x<- d.data
View(x)
d.data <- cbind(names(data), data)
d.data <- cbind(names(chrom), chrom)
d.data <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
View(d.data)
install_github('coleoguy/chromevolR')
d.data <- cbind(names(chrom), chrom)
d.data <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
View(d.data)
d.data <- cbind(names(chrom), chrom)
d.data <- datatoMatrix(x=d.data, range=c(8,17), hyper=T)
View(d.data)
install_github('coleoguy/chromevolR')
d.data <- cbind(names(chrom), chrom)
pmat <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
View(pmat)
d.data <- cbind(names(chrom), chrom)
hp.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=T)
View(hp.mat)
p.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
# convert chromosome number to format for diversitree with hyperstate
d.data <- cbind(names(chrom), chrom)
hp.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=T)
lik <- make.mkn(tree, states=p.mat, k=10, strict=F)
lik.con <- constrainMkn(p.mat, lik)
foo <- find.mle(lik.con,x.init=runif(min = 0, max = 3, 3))
foo <- find.mle(lik.con, x.init = startVals(3, 0, 1))
lik.con(c(.1,.1,.1))
foo <- find.mle(lik.con, x.init = startVals(3, 0, 1))
foo$par
h.lik <- make.mkn(tree, states=hp.mat, k=10, strict=F)
h.lik <- make.mkn(tree, states=hp.mat, k=20, strict=F)
states=hp.mat
k=20
#######
View(hp.mat)
hp.mat[1, 6]<-0
h.lik <- make.mkn(tree, states=hp.mat, k=20, strict=F)
h.lik.con <- constrainMkn(hp.mat, h.lik)
data <- hp.mat
lik <- h.lik
chrom.numbs <- colnames(data)
# create and store variable for padding rate names
if(ncol(data) < 100) pad <- 2
if(ncol(data) >= 100) pad <- 3
if(ncol(data) < 10) pad <- 1
# make the matrix of rates
parMat <- matrix(0,ncol(data),ncol(data))
# make the components of the rate names the column and row
# names this will allow for easy creation of constraints later
colnames(parMat) <- sprintf(paste('%0', pad, 'd', sep=""), 1:ncol(data))
rownames(parMat) <- colnames(parMat)
View(parMat)
chrom.numbs
i <- 13
as.numeric(chrom.numbs)[i]
colnames(data)
c(colnames(data)[1:split], colnames(data)[1:split])
split <- ncol(data)/2
c(colnames(data)[1:split], colnames(data)[1:split])
model="single"
model<- "hyper"
if(model=="single"){
chrom.numbs <- colnames(data)
}
if(model=="hyper"){
split <- ncol(data)/2
chrom.numbs <- c(colnames(data)[1:split], colnames(data)[1:split])
}
# create and store variable for padding rate names
if(ncol(data) < 100) pad <- 2
if(ncol(data) >= 100) pad <- 3
if(ncol(data) < 10) pad <- 1
parMat <- matrix(0,ncol(data),ncol(data))
View(parMat)
colnames(parMat) <- sprintf(paste('%0', pad, 'd', sep=""), 1:ncol(data))
rownames(parMat) <- colnames(parMat)
View(parMat)
chrom.numbs
for(i in 1:(nrow(parMat) - 1)){
if(i < split){
if((as.numeric(chrom.numbs)[i] * 2) <= max(as.numeric(chrom.numbs))){
parMat[i, i+as.numeric(chrom.numbs[i])] <- 5 #polyploidy
}
parMat[i, (i + 1)] <- 1 #ascending aneuploidy
parMat[(i + 1), i] <- 2 #descending aneuploidy
}
if(i >= split){
if((as.numeric(chrom.numbs)[i] * 2) <= max(as.numeric(chrom.numbs))){
parMat[i, i+as.numeric(chrom.numbs[i])] <- 5 #polyploidy
}
parMat[i, (i + 1)] <- 1 #ascending aneuploidy
parMat[(i + 1), i] <- 2 #descending aneuploidy
}
if(as.numeric(chrom.numbs[1]) == 1) parMat[1,2] <- 9
}
View(parMat)
chrom.numbs
i <- 11
as.numeric(chrom.numbs)[i]
as.numeric(chrom.numbs)
max(as.numeric(chrom.numbs)
)
i
as.numeric(chrom.numbs[i])
install_github('coleoguy/chromevolR')
data("tree")
data("chrom")
d.data <- cbind(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
d.data <- cbind(names(chrom), chrom)
hp.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=T)
lik <- make.mkn(tree, states=p.mat, k=10, strict=F)
# Now we make the full mkn likelihood function (w hyper state)
h.lik <- make.mkn(tree, states=hp.mat, k=20, strict=F)
View(hp.mat)
hp.mat[1, 6]<-0
h.lik <- make.mkn(tree, states=hp.mat, k=20, strict=F)
lik.con <- constrainMkn(p.mat, lik)
h.lik.con <- constrainMkn(hp.mat, h.lik)
library(chromevolR)
h.lik.con <- constrainMkn(hp.mat, h.lik)
library(chromevolR)
h.lik.con <- constrainMkn(hp.mat, h.lik)
h.lik.con <- constrainMkn(hp.mat, h.lik, model="hyper")
foo <- find.mle(h.lik.con, x.init = startVals(3, 0, 1))
library(diversitree)
foo <- find.mle(h.lik.con, x.init = startVals(3, 0, 1))
h.lik.con
library(devtools)
install_github('coleoguy/chromevolR')
library(chromevolR)
library(geiger)
library(diversitree)
library(devtools)
install_github('coleoguy/chromevolR')
library(chromevolR)
library(geiger)
library(diversitree)
library(devtools)
install_github('coleoguy/chromevolR')
library(chromevolR)
library(geiger)
library(diversitree)
###
### Loading data
###
data("tree")
data("chrom")
###
###
###
# convert chromosome number to format for diversitree
d.data <- cbind(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
# convert chromosome number to format for diversitree with hyperstate
d.data <- cbind(names(chrom), chrom)
hp.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=T)
# Now we make the full mkn likelihood function (w/o hyper state)
lik <- make.mkn(tree, states=p.mat, k=10, strict=F)
# Now we make the full mkn likelihood function (w hyper state)
h.lik <- make.mkn(tree, states=hp.mat, k=20, strict=F)
#######
#######
hp.mat[1, 6]<-0
h.lik <- make.mkn(tree, states=hp.mat, k=20, strict=F)
# Constrain to chromevol (w/o hyperstate)
lik.con <- constrainMkn(p.mat, lik, model="single")
library(devtools)
install_github('coleoguy/chromevolR')
library(chromevolR)
library(geiger)
library(diversitree)
####
#### Data simulation section
####
# Make a birth-death tree
set.seed(2)
tree <- trees(pars = c(.5, .1),
type = "bd", n = 1,
max.taxa = 100,
include.extinct = FALSE)[[1]]
# Simplify tree & rescale this tree to unit length
tree <- tree[c(1, 3, 5, 2)]
class(tree) <- "phylo"
tree <- geiger::rescale(tree, model = "depth", 1)
plot(tree)
# Evolve chromosome dataset using our simChrom function
set.seed(2)
data <- simChrom(tree, pars=c(2, 1, 0, 10), limits=2:100)
hist(data, breaks=range(data)[2]-range(data)[1])
###
###
###
####### This illustrates the outstanding problem of
####### how we deal with all unknowns in the mkn framework
#######
#######
# For our purposes we can manually fix one
hp.mat[1, 6]<-0
h.lik <- make.mkn(tree, states=hp.mat, k=20, strict=F)
###
data("tree")
data("chrom")
###
###
###
# convert chromosome number to format for diversitree
d.data <- cbind(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
# convert chromosome number to format for diversitree with hyperstate
d.data <- cbind(names(chrom), chrom)
hp.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=T)
# Now we make the full mkn likelihood function (w/o hyper state)
lik <- make.mkn(tree, states=p.mat, k=10, strict=F)
# Now we make the full mkn likelihood function (w hyper state)
h.lik <- make.mkn(tree, states=hp.mat, k=20, strict=F)
#######
#######
####### This illustrates the outstanding problem of
####### how we deal with all unknowns in the mkn framework
#######
#######
# For our purposes we can manually fix one
hp.mat[1, 6]<-0
h.lik <- make.mkn(tree, states=hp.mat, k=20, strict=F)
# Constrain to chromevol (w/o hyperstate)
lik.con <- constrainMkn(p.mat, lik, model="single")
warnings()
lik.con <- constrainMkn(p.mat, lik, model="single")
source('~/Desktop/Dropbox/gitrepos/r-packages/chromevolR/R/constrainMkn.R')
lik.con <- constrainMkn(p.mat, lik, model="single")
# Constrain to chromevol (w hyperstate)
h.lik.con <- constrainMkn(hp.mat, h.lik, model="hyper")
# find MLE
foo <- find.mle(lik.con, x.init = startVals(3, 0, 1))
foo$par
foo <- find.mle(h.lik.con, x.init = startVals(3, 0, 1))
foo <- find.mle(h.lik.con, x.init = startVals(6, 0, 1))
foo <- find.mle(h.lik.con, x.init = startVals(6, 0, 1))
library(devtools)
install_github('coleoguy/chromevolR')
library(diversitree)
### Loading data
data("tree")
data("chrom")
# convert chromosome number to format for diversitree
d.data <- cbind(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
# Now we make the full mkn likelihood function (w/o hyper state)
lik <- make.mkn(tree, states=p.mat, k=10, strict=F)
# Constrain to chromevol (w/o hyperstate)
lik.con <- constrainMkn(p.mat, lik, model="single")
# find MLE
foo <- find.mle(lik.con, x.init = startVals(3, 0, 1))
library(chromevolR)
library(diversitree)
### Loading data
data("tree")
data("chrom")
# convert chromosome number to format for diversitree
d.data <- cbind(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=c(8,17), hyper=F)
# Now we make the full mkn likelihood function (w/o hyper state)
lik <- make.mkn(tree, states=p.mat, k=10, strict=F)
# Constrain to chromevol (w/o hyperstate)
lik.con <- constrainMkn(p.mat, lik, model="single")
# find MLE
foo <- find.mle(lik.con, x.init = startVals(3, 0, 1))
foo$par
foo <- find.mle(lik.con, x.init = startVals(3, 0, 1))
foo$par
foo <- find.mle(lik.con, x.init = startVals(3, 0, 1))
foo$par
library(diversitree)
plot(trees(pars=c(1,.2), type="bd"))
plot(trees(pars=c(1,.2), type="bd", max.taxa=200))
tree <- trees(pars=c(1,.2), type="bd", max.taxa=200)
tree <- trees(pars=c(1,.2), type="bd", max.taxa=200)
tree <- trees(pars=c(1,.2), type="bd", max.taxa=200)[[1]]
plot(tree)
library(chromevolR)
help(simChrom)
simChrom(tree, pars=c(1,.5,0,50), limits = c(2,100))
pars=c(1,.5,0,50)
limits = c(2,100)
q <- matrix(0, length(limits), length(limits))
rownames(q) <- colnames(q) <- limits
# fill in the matrix
# the rows
for(i in 1:nrow(q)){
# the cols
for(j in 1:ncol(q)){
if(i - j == -1) q[i,j] <- pars[1] #increase
if(i - j == 1) q[i,j] <- pars[2] #decrease
if(as.numeric(colnames(q)[j]) /
as.numeric(rownames(q)[i]) == 2) q[i,j] <- pars[3] #polyploid
}
}
diag(q) <- -rowSums(q)
View(q)
simChrom(tree, pars=c(1,.5,0,50), limits = 2:100)
library(geiger)
sum(tree$edge.length)
tree <- rescale(tree, model="depth", 1)
sum(tree$edge.length)
simChrom(tree, pars=c(1,.5,0,50), limits = 2:100)
X <- simChrom(tree, pars=c(1,.5,0,50), limits = 2:100)
hist(X)
X <- simChrom(tree, pars=c(2,1,0,50), limits = 2:100)
hist(X)
X <- simChrom(tree, pars=c(4,2,0,50), limits = 2:100)
hist(X)
plot(density(X))
tree <- trees(pars=c(1,.2), type="bd", max.taxa=200)[[1]]
plot(tree)
library(geiger)
sum(tree$edge.length)
tree <- rescale(tree, model="depth", 2)
sum(tree$edge.length)
library(chromevolR)
X <- simChrom(tree, pars=c(4,2,0,50), limits = 2:100)
plot(density(X))
tree <- trees(pars=c(1,.2), type="bd", max.taxa=200)[[1]]
plot(tree)
library(geiger)
sum(tree$edge.length)
tree <- rescale(tree, model="depth", 2)
sum(tree$edge.length)
library(chromevolR)
X <- simChrom(tree, pars=c(4,2,0,50), limits = 2:100)
plot(density(X))
library(diversitree)
set.seed(1)
tree <- trees(pars=c(1,.2), type="bd", max.taxa=200)[[1]]
plot(tree)
library(geiger)
sum(tree$edge.length)
tree <- rescale(tree, model="depth", 2)
sum(tree$edge.length)
library(chromevolR)
set.seed(1)
X <- simChrom(tree, pars=c(4,2,0,50), limits = 2:100)
plot(density(X))
library(diversitree)
set.seed(1)
tree <- trees(pars=c(1,.2), type="bd", max.taxa=200)[[1]]
plot(tree)
library(geiger)
sum(tree$edge.length)
tree <- rescale(tree, model="depth", 3)
sum(tree$edge.length)
library(chromevolR)
set.seed(1)
X <- simChrom(tree, pars=c(4,2,0,50), limits = 2:100)
plot(density(X))
rm(i,j)
rm(limits)
rm(q)
rm(pars)
plot(density(X))
range(X)
XX <- cbind(names(X), X)
p.mat <- datatoMatrix(x=XX, range=c(45,70), hyper=F)
lik <- make.mkn(tree, states=p.mat, k=26, strict=F)
lik.con <- constrainMkn(p.mat, lik, model="single")
foo <- find.mle(lik.con, x.init = startVals(3, 0, 1))
lik.con(1)
foo <- find.mle(lik.con, x.init = startVals(2, 0, 1))
foo$par
set.seed(1)
tree <- trees(pars=c(1,.2), type="bd", max.taxa=300)[[1]]
plot(tree)
library(geiger)
sum(tree$edge.length)
tree <- rescale(tree, model="depth", 3)
sum(tree$edge.length)
library(chromevolR)
set.seed(1)
X <- simChrom(tree, pars=c(4,2,0,50), limits = 2:100)
plot(density(X))
XX <- cbind(names(X), X)
range(X)
XX <- cbind(names(X), X)
p.mat <- datatoMatrix(x=XX, range=c(40,75), hyper=F)
# Now we make the full mkn likelihood function (w/o hyper state)
lik <- make.mkn(tree, states=p.mat, k=26, strict=F)
lik <- make.mkn(tree, states=p.mat, k=36, strict=F)
# Constrain to chromevol (w/o hyperstate)
lik.con <- constrainMkn(p.mat, lik, model="single")
# find MLE
foo <- find.mle(lik.con, x.init = startVals(2, 0, 1))
foo$par
foo <- find.mle(lik.con, x.init = startVals(2, 0, 1))
foo$par
foo <- find.mle(lik.con, x.init = startVals(2, 0, 1))
